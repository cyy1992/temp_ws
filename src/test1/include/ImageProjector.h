#ifndef IMAGE_PROJECTOR_H
#define IMAGE_PROJECTOR_H

#include <stdint.h>
#include <opencv2/opencv.hpp>

class ImageProjector
{
public:	
	/* intrinsic			???????double?????
	 * distortion			??????????double?????
	 * extrinsicR			??????????double?????
	 * extrinsicT			?????????double?????
	 * srcImageWidth		????????4???????
	 * srcImageHeight		????????4???????
	 * projImageWidth		????????4???????
	 * projImageHeight		????????4???????
	 * worldRangeWidth		????????????????
	 * worldRangeHeight		????????????????
	 * projImageROIWidth	?????ROI??????????????projImageWidth??
	 * projImageROIHeight	?????ROI??????????????projImageHeight??*/
	ImageProjector(const cv::Mat& intrinsic, const cv::Mat& distortion, const cv::Mat& extrinsicR, const cv::Mat& extrinsicT, int srcImageWidth, int srcImageHeight, int projImageWidth, int projImageHeight, double worldRangeWidth, double worldRangeHeight, int projImageROIWidth = -1, int projImageROIHeight = -1);
	~ImageProjector();

	/* distort_point	?????
	 * undistort_point	??????
	 * world_point		?????
	 * project_point	????*/
	//???????????(z = 0)
	void distort2worldPoint(const cv::Point2d& distort_point, cv::Point3d* world_point);
	//????????????
	void distort2undistortPoint(const cv::Point2d& distort_point, cv::Point2d* undistort_point);
	//??????????
	void distort2projectPoint(const cv::Point2d& distort_point, cv::Point2d* project_point);
	//????????????
	void undistort2distortPoint(const cv::Point2d& undistort_point, cv::Point2d* distort_point);
	//???????????
	void undistort2projectPoint(const cv::Point2d& undistort_point, cv::Point2d* project_point);
	//?????????????(z = 0)
	void world2projectPoint(const cv::Point3d& world_point, cv::Point2d* project_point);
	//???????????
	void project2undistortPoint(const cv::Point2d& project_point, cv::Point2d* undistort_point);
	//??????????
	void project2distortPoint(const cv::Point2d& project_point, cv::Point2d* distort_point);
	//?????????????(z = 0)
	void project2worldPoint(const cv::Point2d& project_point, cv::Point3d* world_point);

	/* ?????????
	 * srcImg			IN	?????
	 * projImg			OUT	?????
	 * centerDistortLoc	IN	???ROI????????????????????????????????????????
	 * oriProjLoc		OUT	??????????*/
	void projectImage(const cv::Mat& srcImg, cv::Mat& projImg, const cv::Point2d centerDistortLoc = cv::Point2d(-1, -1), cv::Point oriProjLoc = cv::Point());

private:
	struct InterLinearTable
	{
		uint16_t x;
		uint16_t y;
		uint16_t a;
		uint16_t b;
	};

	void GetXYGivenZ(const double u, const double v, const double Z, double* X, double* Y);
	void calcObjCoeffs();
	void generateProjTable();

	double fx;
	double fx_;
	double fy;
	double fy_;
	double cx;
	double cy;
	double k1;
	double k2;
	double exParamR[9];
	double exParamR_[9];
	double exParamT[3];
	
	int srcWidth;
	int srcHeight;
	int projWidth;	
	int projHeight;
	double worldWidth;
	double worldHeight;
	int projROIWidth;
	int projROIHeight;
	int projWidth_2;
	int projHeight_2;
	int projROIWidth_2;
	int projROIHeight_2;
	
	double coeffs_x;
	double coeffs_y;
	double proj_ratio_x;
	double proj_ratio_x_;
	double proj_ratio_y;
	double proj_ratio_y_;

	InterLinearTable* proj_table;
};

#endif